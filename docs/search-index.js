var searchIndex = {};
searchIndex["tlist"] = {"doc":"An indexable list structure based on a Red-Black tree that uses\nsub-tree counts as a &#39;key&#39; to achieve O(lg N) insertion,\ndeletion, and access. Originally designed for rapid\nmerge operations of a list with a sequence of indexed deltas.","items":[[3,"TList","tlist","An indexable list structure based on a Red-Black tree that uses\nsub-tree counts as a &#39;key&#39; to achieve O(lg N) insertion,\ndeletion, and access. Originally designed for rapid\nmerge operations of a list with a sequence of indexed deltas.",null,null],[3,"Iter","","An iterator over a TList that yields borrowed values in index-order, equivalent to an Iter&lt;T&gt;\nover a Vec&lt;T&gt;. ",null,null],[3,"IntoIter","","An iterator over a TList that consumes the list and yields owned values, equivalent to an\nIntoIter&lt;T&gt; over a Vec&lt;T&gt;.",null,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","","Generate a new TList&lt;T&gt; with the default capacity.",0,{"inputs":[],"output":{"name":"tlist"}}],[11,"with_capacity","","Initialize a new TList&lt;T&gt; with a chosen capacity",0,{"inputs":[{"name":"usize"}],"output":{"name":"tlist"}}],[11,"len","","Gets the number of elements in the TList",0,null],[11,"capacity","","Gets the total possible number of elements the TList can store\nwithout reallocating.",0,null],[11,"from_data","","Build a new TList from a vector\nof data elements, such that the inorder traversal\nof the TList maintains the same ordering as\nthe original vector.",0,null],[11,"insert","","Insert a new value into the TList at the given index. Unlike a regular Vec,\ninsertion at one past the final element (the TList.len() value) is valid and equivalent\nto push(). Insertion is guarenteed to operate in O(log N).",0,null],[11,"push","","Inserts an element at the end of the list. Unlike Vec, this is an O(log N) operation.",0,null],[11,"insert_or_push","","Inserts an element at index if the index is valid, and appends the element per push if the\nindex is invalid past the end.",0,null],[11,"get","","Returns a reference to the value at index if it exists. Runs in O(log N) time.",0,null],[11,"get_mut","","Returns a mutable reference to the value at index if it exists. Runs in O(log N) time.",0,null],[11,"remove","","Deletes the value at the specified index, returning an owned value if it exists. All higher\nindexes are shifted down &quot;implicitly&quot;, yielding the same behavior as removing a value from\na Vec but with O(log N) running time.",0,null],[11,"pop","","Equivalent to remove() on the last element of the TList.",0,null],[11,"iter","","Returns an iterator over the values in the TList in index order, yielding immutable\nborrows. Mirrors Vec&#39;s iter() and Iter&lt;T&gt;.",0,null],[11,"into_iter","","Consumes self and returns an iterator over the values in the TList in index order, yielding\nowned values. Mirrors Vec&#39;s into_iter() and IntoIter&lt;T&gt;.",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null]],"paths":[[3,"TList"],[3,"Iter"],[3,"IntoIter"]]};
initSearch(searchIndex);
